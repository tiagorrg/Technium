import React, { Component } from 'react';
import { EnhancedStore, LiftedState, LiftedStore, Options, InstrumentExt } from '@redux-devtools/instrument';
import { Action, StoreEnhancer } from 'redux';
export interface Props<S, A extends Action<string>, MonitorState> {
    store?: EnhancedStore<S, A, MonitorState>;
}
export type Monitor<S, A extends Action<string>, MonitorProps extends LiftedState<S, A, MonitorState>, MonitorState, MonitorAction extends Action<string>> = React.ReactElement<MonitorProps, React.ComponentType<MonitorProps & LiftedState<S, A, MonitorState>> & {
    update(monitorProps: MonitorProps, state: MonitorState | undefined, action: MonitorAction): MonitorState;
}>;
export interface DevToolsInstance<S, A extends Action<string>, MonitorState> extends Component<Props<S, A, MonitorState>> {
    liftedStore?: LiftedStore<S, A, MonitorState>;
}
export interface DevToolsClass<S, A extends Action<string>, MonitorState, MonitorAction extends Action<string>> {
    new (props: Props<S, A, MonitorState>): DevToolsInstance<S, A, MonitorState>;
    instrument: (options?: Options<S, A, MonitorState, MonitorAction>) => StoreEnhancer<InstrumentExt<any, any, MonitorState>>;
}
export default function createDevTools<S, A extends Action<string>, MonitorProps extends LiftedState<S, A, MonitorState>, MonitorState, MonitorAction extends Action<string>>(children: Monitor<S, A, MonitorProps, MonitorState, MonitorAction>): DevToolsClass<S, A, MonitorState, MonitorAction>;
